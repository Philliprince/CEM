<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.cem.modules.cem.dao.RecordHourPingDao">

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.cem.modules.cem.entity.RecordHourPingEntity" id="recordHourPingMap">
        <result property="id" column="id"/>
        <result property="cityId" column="city_id"/>
        <result property="countyId" column="county_id"/>
        <result property="probeId" column="probe_id"/>
        <result property="port" column="port"/>
        <result property="taskId" column="task_id"/>
        <result property="taskName" column="task_name"/>
        <result property="serviceType" column="service_type"/>
        <result property="servicetypeName" column="servicetype_name"/>
        <result property="targetId" column="target_id"/>
        <result property="targetIp" column="target_ip"/>
        <result property="recordDate" column="record_date"/>
        <result property="recordTime" column="record_time"/>
        <result property="delay" column="delay"/>
        <result property="delayStd" column="delay_std"/>
        <result property="delayVar" column="delay_var"/>
        <result property="jitter" column="jitter"/>
        <result property="jitterStd" column="jitter_std"/>
        <result property="jitterVar" column="jitter_var"/>
        <result property="lossRate" column="loss_rate"/>
        <result property="remark" column="remark"/>
        <result property="cityName" column="city_name"/>
        <result property="areaName" column="area_name"/>
        <result property="probeName" column="probe_name"/>
        <result property="targetName" column="target_name"/>
        <result property="targetipName" column="targetip_name"/>
        <result property="accessLayer" column="access_layer"/>
        <result property="fail" column="fail"/>
        <result property="total" column="total"/>
    </resultMap>

    <select id="queryObject" resultType="io.cem.modules.cem.entity.RecordHourPingEntity">
		select * from record_hour_ping where id = #{value}
	</select>

    <select id="queryList" resultType="io.cem.modules.cem.entity.RecordHourPingEntity">
        select
        record_hour_ping.* ,
        city.city_name AS city_name,
        county.county_name AS area_name,
        probe.probe_name AS probe_name,
        probe.access_layer AS accessLayer,
        target.target_name AS target_name
        FROM record_hour_ping rhp
        LEFT JOIN city
        ON rhp.city_id = city.city_id
        LEFT JOIN county
        ON rhp.county_id = county.county_id
        LEFT JOIN probe
        ON rhp.probe_id = probe.id
        LEFT JOIN target
        ON rhp.target_id = target.id
        WHERE rhp.record_date BETWEEN #{ava_start} AND #{ava_terminal}
        <if test="city_id != null and city_id != ''">
            AND record_hour_ping.city_id = #{city_id}
        </if>
        <if test="county_id != null and county_id != ''">
            AND record_hour_ping.county_id = #{county_id}
        </if>
        <if test="target_id != null and target_id != ''">
            AND record_hour_ping.target_id = #{target_id}
        </if>
        <if test="probe_id != null and probe_id != ''">
            AND record_hour_ping.probe_id = #{probe_id}
        </if>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by id desc
            </otherwise>
        </choose>
    </select>

    <!--Miao在3.28对此方法进行了性能优化-->
    <!--质量ping排名小时表方法-->
    <select id="queryPingList" resultType="io.cem.modules.cem.entity.RecordHourPingEntity">
        SELECT t.*,
        city.city_name AS city_name,
        county.county_name AS area_name,
        probe.probe_name AS probe_name,
        probe.access_layer,
        target.target_name AS target_name
        FROM
        (SELECT rhp.id,rhp.city_id,rhp.county_id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
        time_format(record_time, '%H') AS record_time,
        AVG(rhp.delay) AS delay,
        AVG(rhp.delay_std) AS delay_std,
        AVG(rhp.delay_var) AS delay_var,
        AVG(rhp.jitter) AS jitter,
        AVG(rhp.jitter_std) AS jitter_std,
        AVG(rhp.jitter_var) AS jitter_var,
        AVG(rhp.loss_rate) AS loss_rate,
        SUM(rhp.fail) AS fail,
        SUM(rhp.total) AS total
        FROM record_hour_ping rhp
        force index(idx_score)
        WHERE rhp.record_date BETWEEN #{ava_start} AND #{ava_terminal}
        <if test="probe_id != null and probe_id != ''">
            AND rhp.probe_id = #{probe_id}
        </if>
        <if test="city_id != null and city_id != ''">
            AND rhp.city_id = #{city_id}
        </if>
        <if test="county_id != null and county_id != ''">
            AND rhp.county_id = #{county_id}
        </if>
        <if test="target_id != null and target_id != ''">
            AND rhp.target_id = #{target_id}
        </if>
        <if test="startTime != null and terminalTime != null">
            AND record_time BETWEEN #{startTime} AND #{terminalTime}
        </if>
        GROUP BY
        rhp.record_date,rhp.probe_id,rhp.city_id,rhp.county_id,rhp.record_time,rhp.service_type) t
        INNER JOIN probe
        ON t.probe_id = probe.id
        LEFT JOIN city
        ON t.city_id = city.city_id
        LEFT JOIN county
        ON t.county_id = county.county_id
        LEFT JOIN target
        ON t.target_id = target.id
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>


    <!--门户ping排名小时表方法-->
    <select id="queryTargetHourList" resultType="io.cem.modules.cem.entity.RecordHourPingEntity">
        SELECT t.*,
        city.city_name AS city_name,
        county.county_name AS area_name,
        probe.probe_name AS probe_name,
        probe.access_layer,
        target.target_name AS target_name
        FROM
        (SELECT rhp.id,rhp.city_id,rhp.county_id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
        time_format(record_time, '%H') AS record_time,
        AVG(delay) AS delay,
        AVG(delay_std) AS delay_std,
        AVG(delay_var) AS delay_var,
        AVG(jitter) AS jitter,
        AVG(jitter_std) AS jitter_std,
        AVG(jitter_var) AS jitter_var,
        AVG(loss_rate) AS loss_rate,
        SUM(fail) AS fail,
        SUM(total) AS total
        FROM record_hour_ping rhp
        WHERE rhp.record_date BETWEEN #{ava_start} AND #{ava_terminal}
        <if test="probe_id != null and probe_id != ''">
            AND rhp.probe_id = #{probe_id}
        </if>
        <if test="city_id != null and city_id != ''">
            AND rhp.city_id = #{city_id}
        </if>
        <if test="county_id != null and county_id != ''">
            AND rhp.county_id = #{county_id}
        </if>
        <if test="startTime != null and terminalTime != null">
            AND record_time BETWEEN #{startTime} AND #{terminalTime}
        </if>
        GROUP BY target_id) t
        INNER JOIN probe
        ON t.probe_id = probe.id
        LEFT JOIN city
        ON t.city_id = city.city_id
        LEFT JOIN county
        ON t.county_id = county.county_id
        LEFT JOIN target
        ON t.target_id = target.id
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <!--质量排名获取总记录条数(queryPingList的count)-->
    <select id="pingListTotal" resultType="int">
        select count(*) FROM (
        SELECT
        rhp.id,rhp.city_id,rhp.county_id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
        FROM record_hour_ping rhp
        INNER JOIN probe
        ON rhp.probe_id = probe.id
        LEFT JOIN target
        ON rhp.target_id = target.id
        WHERE rhp.record_date BETWEEN #{ava_start} AND #{ava_terminal}
        <if test="city_id != null and city_id != ''">
            AND rhp.city_id = #{city_id}
        </if>
        <if test="county_id != null and county_id != ''">
            AND rhp.county_id = #{county_id}
        </if>
        <if test="target_id != null and target_id != ''">
            AND rhp.target_id = #{target_id}
        </if>
        <if test="probe_id != null and probe_id != ''">
            AND rhp.probe_id = #{probe_id}
        </if>
        GROUP BY
        rhp.record_date,rhp.probe_id,rhp.city_id,rhp.county_id,rhp.record_time,rhp.service_type)
    </select>

    <select id="queryDayList" resultType="io.cem.modules.cem.entity.RecordHourPingEntity">
        select
        rhp.id,rhp.city_id,rhp.county_id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
        city.city_name AS city_name,
        county.county_name AS area_name,
        probe.probe_name AS probe_name,
        probe.access_layer,
        target.target_name AS target_name,
        time_format(record_time, '%H') AS record_time,
        AVG(rhp.delay) AS delay,
        AVG(rhp.delay_std) AS delay_std,
        AVG(rhp.delay_var) AS delay_var,
        AVG(rhp.jitter) AS jitter,
        AVG(rhp.jitter_std) AS jitter_std,
        AVG(rhp.jitter_var) AS jitter_var,
        AVG(rhp.loss_rate) AS loss_rate,
        SUM(rhp.fail) AS fail,
        SUM(rhp.total) AS total
        FROM record_day_ping rhp
        LEFT JOIN city
        ON rhp.city_id = city.city_id
        LEFT JOIN county
        ON rhp.county_id = county.county_id
        INNER JOIN probe
        ON rhp.probe_id = probe.id
        LEFT JOIN target
        ON rhp.target_id = target.id
        WHERE rhp.record_date BETWEEN #{ava_start} AND #{ava_terminal}
        <if test="city_id != null and city_id != ''">
            AND rhp.city_id = #{city_id}
        </if>
        <if test="county_id != null and county_id != ''">
            AND rhp.county_id = #{county_id}
        </if>
        <if test="target_id != null and target_id != ''">
            AND rhp.target_id = #{target_id}
        </if>
        <if test="probe_id != null and probe_id != ''">
            AND rhp.probe_id = #{probe_id}
        </if>
        GROUP BY
        rhp.city_id,rhp.county_id,rhp.service_type,rhp.probe_id,date_format(rhp.record_date,'%Y-%m-%d')

    </select>

    <select id="queryExitList" resultType="io.cem.modules.cem.entity.RecordHourPingEntity">
        select
        rhp.id,rhp.city_id,rhp.county_id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
        city.city_name AS city_name,
        county.county_name AS area_name,
        probe.probe_name AS probe_name,
        probe.access_layer,
        target.target_name AS target_name,
        time_format(record_time, '%H') AS record_time,
        AVG(rhp.delay) AS delay,
        AVG(rhp.delay_std) AS delay_std,
        AVG(rhp.delay_var) AS delay_var,
        AVG(rhp.jitter) AS jitter,
        AVG(rhp.jitter_std) AS jitter_std,
        AVG(rhp.jitter_var) AS jitter_var,
        AVG(rhp.loss_rate) AS loss_rate,
        SUM(rhp.fail) AS fail,
        SUM(rhp.total) AS total
        FROM record_hour_ping rhp
        LEFT JOIN city
        ON rhp.city_id = city.city_id
        LEFT JOIN county
        ON rhp.county_id = county.county_id
        INNER JOIN probe
        ON rhp.probe_id = probe.id
        LEFT JOIN target
        ON rhp.target_id = target.id
        WHERE rhp.record_date BETWEEN #{ava_start} AND #{ava_terminal}
        AND rhp.port = #{port}
        AND rhp.probe_id = #{probe_id}
        GROUP BY
        rhp.port,rhp.probe_id
    </select>

    <select id="queryDayExitList" resultType="io.cem.modules.cem.entity.RecordHourPingEntity">
        select
        record_day_ping.id,record_day_ping.city_id,record_day_ping.county_id,record_day_ping.probe_id,record_day_ping.port,record_day_ping.task_id,record_day_ping.service_type,record_day_ping.target_id,record_day_ping.target_ip,record_day_ping.record_date,record_day_ping.remark,
        city.city_name AS city_name,
        county.county_name AS area_name,
        probe.probe_name AS probe_name,
        probe.access_layer,
        target.target_name AS target_name,
        time_format(record_time, '%H') AS record_time,
        AVG(record_day_ping.delay) AS delay,
        AVG(record_day_ping.delay_std) AS delay_std,
        AVG(record_day_ping.delay_var) AS delay_var,
        AVG(record_day_ping.jitter) AS jitter,
        AVG(record_day_ping.jitter_std) AS jitter_std,
        AVG(record_day_ping.jitter_var) AS jitter_var,
        AVG(record_day_ping.loss_rate) AS loss_rate,
        SUM(record_day_ping.fail) AS fail,
        SUM(record_day_ping.total) AS total
        FROM record_day_ping
        LEFT JOIN city
        ON record_day_ping.city_id = city.city_id
        LEFT JOIN county
        ON record_day_ping.county_id = county.county_id
        INNER JOIN probe
        ON record_day_ping.probe_id = probe.id
        LEFT JOIN target
        ON record_day_ping.target_id = target.id
        WHERE record_day_ping.record_date BETWEEN #{ava_start} AND #{ava_terminal}
        AND record_day_ping.port = #{port}
        AND record_day_ping.probe_id = #{probe_id}
        GROUP BY
        record_day_ping.port,record_day_ping.probe_id
    </select>

    <!--根据统计粒度查询小时表-->
    <select id="queryIntervalList" resultType="io.cem.modules.cem.entity.RecordHourPingEntity">
        select
        rhp.id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
        probe.probe_name AS probe_name,
        task.task_name AS task_name,
        target.target_name AS target_name,
        target.value AS targetip_name,
        floor(time_format(record_time, '%H')/#{interval}) AS rt,
        concat('从',floor(time_format(record_time, '%H')/#{interval})*#{interval},'点至',floor(time_format(record_time,
        '%H')/#{interval})*#{interval}+#{interval},'点') AS record_time,
        round(AVG(rhp.delay),2) AS delay,
        round(AVG(rhp.delay_std),2) AS delay_std,
        round(AVG(rhp.delay_var),2) AS delay_var,
        round(AVG(rhp.jitter),2) AS jitter,
        round(AVG(rhp.jitter_std),2) AS jitter_std,
        round(AVG(rhp.jitter_var),2) AS jitter_var,
        round(AVG(rhp.loss_rate),2) AS loss_rate,
        d.data_name AS servicetype_name
        FROM record_hour_ping rhp
        INNER JOIN probe
        ON rhp.probe_id = probe.id
        INNER JOIN task
        ON rhp.task_id = task.id
        INNER JOIN target
        ON rhp.target_id = target.id
        LEFT JOIN dic_data d
        ON (d.dic_type_id = 5 AND rhp.service_type = d.data_id)
        WHERE
        rhp.service_type = #{service_type}
        AND rhp.record_date BETWEEN #{startDate} AND #{terminalDate}
        AND rhp.record_time BETWEEN #{start_time} AND #{end_time}
        <if test="task_id != null and task_id != ''">
            AND rhp.task_id = #{task_id}
        </if>
        <if test="target_id != null and target_id != ''">
            AND rhp.target_id = #{target_id}
        </if>
        <if test="probe_id != null and probe_id != ''">
            AND rhp.probe_id = #{probe_id}
        </if>
        GROUP BY
        rhp.service_type,rhp.target_id,rhp.task_id,rhp.probe_id,date_format(rhp.record_date,'%Y-%m-%d'),rt
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                ORDER BY ${sidx} ${order}
            </when>
            <otherwise>
                ORDER BY record_date DESC,rt DESC
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="queryIntervalTotal" resultType="int">
        SELECT count(*) FROM (
        select
        rhp.id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
        floor(time_format(record_time, '%H')/#{interval}) AS rt
        FROM record_hour_ping rhp
        INNER JOIN probe
        ON rhp.probe_id = probe.id
        INNER JOIN task
        ON rhp.task_id = task.id
        INNER JOIN target
        ON rhp.target_id = target.id
        WHERE
        rhp.service_type = #{service_type}
        AND rhp.record_date BETWEEN #{startDate} AND #{terminalDate}
        AND rhp.record_time BETWEEN #{start_time} AND #{end_time}
        <if test="task_id != null and task_id != ''">
            AND rhp.task_id = #{task_id}
        </if>
        <if test="target_id != null and target_id != ''">
            AND rhp.target_id = #{target_id}
        </if>
        <if test="probe_id != null and probe_id != ''">
            AND rhp.probe_id = #{probe_id}
        </if>
        GROUP BY
        rhp.service_type,rhp.target_id,rhp.task_id,rhp.probe_id,date_format(rhp.record_date,'%Y-%m-%d'),rt) t
    </select>


    <select id="queryTotal" resultType="int">
        select count(*) from record_hour_ping
    </select>

    <insert id="save" parameterType="io.cem.modules.cem.entity.RecordHourPingEntity" useGeneratedKeys="true"
            keyProperty="id">
		insert into record_hour_ping
		(
			`city_id`, 
			`county_id`, 
			`probe_id`, 
			`port`, 
			`task_id`, 
			`service_type`, 
			`target_id`, 
			`target_ip`, 
			`record_date`, 
			`record_time`, 
			`delay`, 
			`delay_std`, 
			`delay_var`, 
			`jitter`, 
			`jitter_std`, 
			`jitter_var`, 
			`loss_rate`, 
			`remark`
		)
		values
		(
			#{cityId}, 
			#{countyId}, 
			#{probeId}, 
			#{port}, 
			#{taskId}, 
			#{serviceType}, 
			#{targetId}, 
			#{targetIp}, 
			#{recordDate}, 
			#{recordTime}, 
			#{delay}, 
			#{delayStd}, 
			#{delayVar}, 
			#{jitter}, 
			#{jitterStd}, 
			#{jitterVar}, 
			#{lossRate}, 
			#{remark}
		)
	</insert>

    <update id="update" parameterType="io.cem.modules.cem.entity.RecordHourPingEntity">
        update record_hour_ping
        <set>
            <if test="cityId != null">`city_id` = #{cityId},</if>
            <if test="countyId != null">`county_id` = #{countyId},</if>
            <if test="probeId != null">`probe_id` = #{probeId},</if>
            <if test="port != null">`port` = #{port},</if>
            <if test="taskId != null">`task_id` = #{taskId},</if>
            <if test="serviceType != null">`service_type` = #{serviceType},</if>
            <if test="targetId != null">`target_id` = #{targetId},</if>
            <if test="targetIp != null">`target_ip` = #{targetIp},</if>
            <if test="recordDate != null">`record_date` = #{recordDate},</if>
            <if test="recordTime != null">`record_time` = #{recordTime},</if>
            <if test="delay != null">`delay` = #{delay},</if>
            <if test="delayStd != null">`delay_std` = #{delayStd},</if>
            <if test="delayVar != null">`delay_var` = #{delayVar},</if>
            <if test="jitter != null">`jitter` = #{jitter},</if>
            <if test="jitterStd != null">`jitter_std` = #{jitterStd},</if>
            <if test="jitterVar != null">`jitter_var` = #{jitterVar},</if>
            <if test="lossRate != null">`loss_rate` = #{lossRate},</if>
            <if test="remark != null">`remark` = #{remark}</if>
        </set>
        where id = #{id}
    </update>

    <delete id="delete">
		delete from record_hour_ping where id = #{value}
	</delete>

    <delete id="deleteBatch">
        delete from record_hour_ping where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>