<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.cem.modules.cem.dao.RecordHourRadiusDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.cem.modules.cem.entity.RecordHourRadiusEntity" id="recordHourRadiusMap">
        <result property="id" column="id"/>
        <result property="cityId" column="city_id"/>
        <result property="countyId" column="county_id"/>
        <result property="probeId" column="probe_id"/>
        <result property="port" column="port"/>
        <result property="taskId" column="task_id"/>
        <result property="serviceType" column="service_type"/>
        <result property="targetId" column="target_id"/>
        <result property="targetIp" column="target_ip"/>
        <result property="recordDate" column="record_date"/>
        <result property="recordTime" column="record_time"/>
        <result property="delay" column="delay"/>
        <result property="successRate" column="success_rate"/>
        <result property="remark" column="remark"/>
		<result property="cityName" column="city_name"/>
		<result property="areaName" column="area_name"/>
		<result property="probeName" column="probe_name"/>
		<result property="targetName" column="target_name"/>
		<result property="fail" column="fail"/>
		<result property="total" column="total"/>
    </resultMap>

	<select id="queryObject" resultType="io.cem.modules.cem.entity.RecordHourRadiusEntity">
		select * from record_hour_radius where id = #{value}
	</select>

	<select id="queryList" resultType="io.cem.modules.cem.entity.RecordHourRadiusEntity">
		select * from record_hour_radius
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from record_hour_radius 
	</select>

	<select id="queryRadiusList" resultType="io.cem.modules.cem.entity.RecordHourRadiusEntity">
		select record_hour_radius.id,record_hour_radius.city_id,record_hour_radius.county_id,record_hour_radius.probe_id,record_hour_radius.port,record_hour_radius.task_id,record_hour_radius.service_type,record_hour_radius.target_id,record_hour_radius.target_ip,record_hour_radius.record_date,record_hour_radius.record_time,record_hour_radius.remark,
		city.city_name AS city_name,
		county.county_name AS area_name,
		probe.probe_name AS probe_name,
		target.target_name AS target_name,
		AVG(record_hour_radius.delay) AS delay,
		AVG(record_hour_radius.success_rate) AS success_rate,
		SUM(record_hour_radius.fail) AS fail,
		SUM(record_hour_radius.total) AS total
		FROM record_hour_radius
		LEFT JOIN city
		ON record_hour_radius.city_id = city.city_id
		LEFT JOIN county
		ON record_hour_radius.county_id = county.county_id
		INNER JOIN probe
		ON record_hour_radius.probe_id = probe.id
		LEFT JOIN target
		ON record_hour_radius.target_id = target.id
		WHERE record_hour_radius.record_date BETWEEN #{ava_start} AND #{ava_terminal}
		<if test="city_id != null and city_id != ''">
			AND record_hour_radius.city_id = #{city_id}
		</if>
		<if test="county_id != null and county_id != ''">
			AND record_hour_radius.county_id = #{county_id}
		</if>
		<if test="target_id != null and target_id != ''">
			AND record_hour_radius.target_id = #{target_id}
		</if>
		<if test="probe_id != null and probe_id != ''">
			AND record_hour_radius.probe_id = #{probe_id}
		</if>
		GROUP BY record_hour_radius.city_id,record_hour_radius.county_id,record_hour_radius.service_type,record_hour_radius.target_id,record_hour_radius.probe_id,date_format(record_hour_radius.record_date,'%Y-%m-%d'),time_format(record_hour_radius.record_time, '%H')

	</select>

	<select id="queryDayList" resultType="io.cem.modules.cem.entity.RecordHourRadiusEntity">
		select radius.id,radius.city_id,radius.county_id,radius.probe_id,radius.port,radius.task_id,radius.service_type,radius.target_id,radius.target_ip,radius.record_date,radius.record_time,radius.remark,
		city.city_name AS city_name,
		county.county_name AS area_name,
		probe.probe_name AS probe_name,
		target.target_name AS target_name,
		AVG(radius.delay) AS delay,
		AVG(radius.success_rate) AS success_rate,
		SUM(radius.fail) AS fail,
		SUM(radius.total) AS total
		FROM record_day_radius radius
		LEFT JOIN city
		ON radius.city_id = city.city_id
		LEFT JOIN county
		ON radius.county_id = county.county_id
		INNER JOIN probe
		ON radius.probe_id = probe.id
		LEFT JOIN target
		ON radius.target_id = target.id
		WHERE radius.record_date BETWEEN #{ava_start} AND #{ava_terminal}
		<if test="city_id != null and city_id != ''">
			AND radius.city_id = #{city_id}
		</if>
		<if test="county_id != null and county_id != ''">
			AND radius.county_id = #{county_id}
		</if>
		<if test="target_id != null and target_id != ''">
			AND radius.target_id = #{target_id}
		</if>
		<if test="probe_id != null and probe_id != ''">
			AND radius.probe_id = #{probe_id}
		</if>
		GROUP BY radius.city_id,radius.county_id,radius.service_type,radius.target_id,radius.probe_id,date_format(radius.record_date,'%Y-%m-%d'),time_format(radius.record_time, '%H')

	</select>

	<!--根据统计粒度查询小时表-->
	<select id="queryIntervalList" resultType="io.cem.modules.cem.entity.RecordHourRadiusEntity">
		select
		rhp.id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
		probe.probe_name AS probe_name,
		task.task_name AS task_name,
		target.target_name AS target_name,
		target.value AS targetip_name,
		floor(time_format(record_time, '%H')/#{interval}) AS rt,
		concat('从',floor(time_format(record_time, '%H')/#{interval})*#{interval},'点至',floor(time_format(record_time,
		'%H')/#{interval})*#{interval}+#{interval},'点') AS record_time,
		round(AVG(rhp.delay),2) AS delay,
		round(AVG(rhp.delay_std),2) AS delay_std,
		round(AVG(rhp.delay_var),2) AS delay_var,
		round(AVG(rhp.jitter),2) AS jitter,
		round(AVG(rhp.jitter_std),2) AS jitter_std,
		round(AVG(rhp.jitter_var),2) AS jitter_var,
		round(AVG(rhp.loss_rate),2) AS loss_rate,
		d.data_name AS servicetype_name
		FROM record_hour_radius rhp
		INNER JOIN probe
		ON rhp.probe_id = probe.id
		INNER JOIN task
		ON rhp.task_id = task.id
		INNER JOIN target
		ON rhp.target_id = target.id
		LEFT JOIN dic_data d
		ON (d.dic_type_id = 5 AND rhp.service_type = d.data_id)
		WHERE
		rhp.service_type = #{service_type}
		AND rhp.record_date BETWEEN #{startDate} AND #{terminalDate}
		AND rhp.record_time BETWEEN #{start_time} AND #{end_time}
		<if test="task_id != null and task_id != ''">
			AND rhp.task_id = #{task_id}
		</if>
		<if test="target_id != null and target_id != ''">
			AND rhp.target_id = #{target_id}
		</if>
		<if test="probe_id != null and probe_id != ''">
			AND rhp.probe_id = #{probe_id}
		</if>
		GROUP BY
		rhp.service_type,rhp.target_id,rhp.task_id,rhp.probe_id,date_format(rhp.record_date,'%Y-%m-%d'),rt
		<choose>
			<when test="sidx != null and sidx.trim() != ''">
				ORDER BY ${sidx} ${order}
			</when>
			<otherwise>
				ORDER BY record_date DESC,rt DESC
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="queryIntervalTotal" resultType="int">
		SELECT count(*) FROM (
		select
		rhp.id,rhp.probe_id,rhp.port,rhp.task_id,rhp.service_type,rhp.target_id,rhp.target_ip,rhp.record_date,rhp.remark,
		floor(time_format(record_time, '%H')/#{interval}) AS rt,AVG(rhp.delay) AS delay,
		AVG(rhp.delay_std) AS delay_std,
		AVG(rhp.delay_var) AS delay_var,
		AVG(rhp.jitter) AS jitter,
		AVG(rhp.jitter_std) AS jitter_std,
		AVG(rhp.jitter_var) AS jitter_var,
		AVG(rhp.loss_rate) AS loss_rate
		FROM record_hour_radius rhp
		WHERE
		rhp.service_type = #{service_type}
		AND rhp.record_date BETWEEN #{startDate} AND #{terminalDate}
		AND rhp.record_time BETWEEN #{start_time} AND #{end_time}
		<if test="task_id != null and task_id != ''">
			AND rhp.task_id = #{task_id}
		</if>
		<if test="target_id != null and target_id != ''">
			AND rhp.target_id = #{target_id}
		</if>
		<if test="probe_id != null and probe_id != ''">
			AND rhp.probe_id = #{probe_id}
		</if>
		GROUP BY
		rhp.service_type,rhp.target_id,rhp.task_id,rhp.probe_id,date_format(rhp.record_date,'%Y-%m-%d'),rt) t
	</select>
	
	<insert id="save" parameterType="io.cem.modules.cem.entity.RecordHourRadiusEntity" useGeneratedKeys="true" keyProperty="id">
		insert into record_hour_radius
		(
			`city_id`, 
			`county_id`, 
			`probe_id`, 
			`port`, 
			`task_id`, 
			`service_type`, 
			`target_id`, 
			`target_ip`, 
			`record_date`, 
			`record_time`, 
			`delay`, 
			`success_rate`, 
			`remark`
		)
		values
		(
			#{cityId}, 
			#{countyId}, 
			#{probeId}, 
			#{port}, 
			#{taskId}, 
			#{serviceType}, 
			#{targetId}, 
			#{targetIp}, 
			#{recordDate}, 
			#{recordTime}, 
			#{delay}, 
			#{successRate}, 
			#{remark}
		)
	</insert>
	 
	<update id="update" parameterType="io.cem.modules.cem.entity.RecordHourRadiusEntity">
		update record_hour_radius 
		<set>
			<if test="cityId != null">`city_id` = #{cityId}, </if>
			<if test="countyId != null">`county_id` = #{countyId}, </if>
			<if test="probeId != null">`probe_id` = #{probeId}, </if>
			<if test="port != null">`port` = #{port}, </if>
			<if test="taskId != null">`task_id` = #{taskId}, </if>
			<if test="serviceType != null">`service_type` = #{serviceType}, </if>
			<if test="targetId != null">`target_id` = #{targetId}, </if>
			<if test="targetIp != null">`target_ip` = #{targetIp}, </if>
			<if test="recordDate != null">`record_date` = #{recordDate}, </if>
			<if test="recordTime != null">`record_time` = #{recordTime}, </if>
			<if test="delay != null">`delay` = #{delay}, </if>
			<if test="successRate != null">`success_rate` = #{successRate}, </if>
			<if test="remark != null">`remark` = #{remark}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from record_hour_radius where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from record_hour_radius where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>